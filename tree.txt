RAG-bidding/
│
├── 📦 config/                          # Configuration centralized
│   ├── __init__.py
│   ├── settings.py                    # Main settings (merge từ enhanced_config.py)
│   ├── models.py                      # Model configs (LLM, embedding)
│   ├── retrieval.py                   # Retrieval configs
│   ├── logging_config.py              # Logging setup
│   └── legal_patterns.json            # Legal document patterns
│
├── 📂 data/                            # Data management
│   ├── raw/                           # Raw documents
│   │   ├── laws/                      # Luật
│   │   ├── decrees/                   # Nghị định
│   │   ├── circulars/                 # Thông tư
│   │   └── guidelines/                # Hướng dẫn
│   │
│   ├── processed/                     # Processed data
│   │   ├── chunks/                    # Chunked documents
│   │   ├── metadata/                  # Document metadata
│   │   └── embeddings/                # Pre-computed embeddings
│   │
│   └── indexes/                       # Vector store indexes
│       ├── pgvector/                  # PostgreSQL vector data
│       └── backup/                    # Index backups
│
├── 🔧 src/                             # Main source code
│   ├── __init__.py
│   │
│   ├── ingestion/                     # Phase 1: Data Ingestion
│   │   ├── __init__.py
│   │   ├── crawlers/                  # Web crawlers
│   │   │   ├── __init__.py
│   │   │   ├── base_crawler.py
│   │   │   └── thuvienphapluat_crawler.py
│   │   │
│   │   ├── extractors/                # Content extraction
│   │   │   ├── __init__.py
│   │   │   ├── pdf_extractor.py
│   │   │   ├── ocr_processor.py       # OCR với VinTern
│   │   │   └── markdown_extractor.py
│   │   │
│   │   └── validators/                # Input validation
│   │       ├── __init__.py
│   │       ├── document_validator.py
│   │       └── format_validator.py
│   │
│   ├── preprocessing/                  # Phase 2: Preprocessing
│   │   ├── __init__.py
│   │   ├── cleaners/                  # Text cleaning
│   │   │   ├── __init__.py
│   │   │   ├── text_cleaner.py
│   │   │   └── legal_normalizer.py
│   │   │
│   │   ├── parsers/                   # Structure parsing
│   │   │   ├── __init__.py
│   │   │   ├── legal_structure_parser.py
│   │   │   └── markdown_parser.py
│   │   │
│   │   └── metadata/                  # Metadata extraction
│   │       ├── __init__.py
│   │       ├── extractor.py
│   │       └── enricher.py
│   │
│   ├── chunking/                      # Phase 3: Chunking
│   │   ├── __init__.py
│   │   ├── strategies/                # Chunking strategies
│   │   │   ├── __init__.py
│   │   │   ├── legal_chunker.py       # Structure-based
│   │   │   ├── semantic_chunker.py    # Semantic-based
│   │   │   └── hybrid_chunker.py      # Hybrid approach
│   │   │
│   │   ├── optimal_chunker.py         # Optimal chunk size
│   │   └── chunk_validator.py         # Quality validation
│   │
│   ├── embedding/                     # Phase 4: Embedding
│   │   ├── __init__.py
│   │   ├── generators/                # Embedding generation
│   │   │   ├── __init__.py
│   │   │   ├── openai_embedder.py
│   │   │   └── batch_embedder.py
│   │   │
│   │   └── store/                     # Vector storage
│   │       ├── __init__.py
│   │       ├── pgvector_store.py
│   │       └── index_builder.py
│   │
│   ├── retrieval/                     # Phase 5: Retrieval (Query Enhancement)
│   │   ├── __init__.py
│   │   │
│   │   ├── query_processing/          # Query processing
│   │   │   ├── __init__.py
│   │   │   ├── query_analyzer.py      # Phân tích query
│   │   │   ├── query_enhancer.py      # Multi-query, HyDE, etc
│   │   │   ├── query_rewriter.py      # Query rewriting
│   │   │   └── complexity_analyzer.py # Độ phức tạp câu hỏi
│   │   │
│   │   ├── retrievers/                # Retrieval strategies
│   │   │   ├── __init__.py
│   │   │   ├── base_retriever.py
│   │   │   ├── semantic_retriever.py
│   │   │   ├── hybrid_retriever.py    # Vector + keyword
│   │   │   ├── adaptive_retriever.py  # Dynamic k
│   │   │   └── legal_retriever.py     # Legal-specific
│   │   │
│   │   ├── ranking/                   # Reranking
│   │   │   ├── __init__.py
│   │   │   ├── reranker.py
│   │   │   ├── legal_scorer.py
│   │   │   └── relevance_filter.py
│   │   │
│   │   └── filters/                   # Post-retrieval filtering
│   │       ├── __init__.py
│   │       ├── date_filter.py
│   │       ├── type_filter.py
│   │       └── deduplicator.py
│   │
│   ├── generation/                    # Phase 6: Response Generation
│   │   ├── __init__.py
│   │   ├── chains/                    # LLM chains
│   │   │   ├── __init__.py
│   │   │   ├── qa_chain.py
│   │   │   ├── enhanced_chain.py
│   │   │   └── multi_turn_chain.py
│   │   │
│   │   ├── prompts/                   # Prompt templates
│   │   │   ├── __init__.py
│   │   │   ├── qa_prompts.py
│   │   │   ├── legal_prompts.py
│   │   │   └── templates/
│   │   │
│   │   ├── formatters/                # Response formatting
│   │   │   ├── __init__.py
│   │   │   ├── citation_formatter.py
│   │   │   └── legal_formatter.py
│   │   │
│   │   └── validators/                # Response validation
│   │       ├── __init__.py
│   │       ├── fact_checker.py
│   │       └── consistency_checker.py
│   │
│   ├── evaluation/                    # Phase 7: Evaluation
│   │   ├── __init__.py
│   │   ├── metrics/                   # Evaluation metrics
│   │   │   ├── __init__.py
│   │   │   ├── retrieval_metrics.py
│   │   │   ├── generation_metrics.py
│   │   │   └── legal_metrics.py
│   │   │
│   │   ├── benchmarks/                # Benchmarking
│   │   │   ├── __init__.py
│   │   │   ├── retrieval_benchmark.py
│   │   │   └── end_to_end_benchmark.py
│   │   │
│   │   └── datasets/                  # Test datasets
│   │       ├── __init__.py
│   │       └── legal_qa_dataset.py
│   │
│   ├── models/                        # Data models
│   │   ├── __init__.py
│   │   ├── document.py                # Document models
│   │   ├── chunk.py                   # Chunk models
│   │   ├── query.py                   # Query models
│   │   ├── retrieval.py               # Retrieval models
│   │   └── response.py                # Response models
│   │
│   ├── pipelines/                     # End-to-end pipelines
│   │   ├── __init__.py
│   │   ├── ingestion_pipeline.py      # Full ingestion pipeline
│   │   ├── rag_pipeline.py            # Complete RAG pipeline
│   │   └── evaluation_pipeline.py     # Evaluation pipeline
│   │
│   └── utils/                         # Utilities
│       ├── __init__.py
│       ├── file_utils.py              # File operations
│       ├── text_utils.py              # Text processing
│       ├── legal_utils.py             # Legal-specific utilities
│       ├── date_utils.py              # Date parsing
│       └── logging_utils.py           # Logging helpers
│
├── 🌐 api/                             # API layer
│   ├── __init__.py
│   ├── main.py                        # FastAPI app
│   ├── dependencies.py                # Dependency injection
│   │
│   ├── routers/                       # API routes
│   │   ├── __init__.py
│   │   ├── documents.py               # Document management
│   │   ├── search.py                  # Search & retrieval
│   │   ├── chat.py                    # Chat endpoints
│   │   └── admin.py                   # Admin endpoints
│   │
│   ├── schemas/                       # Pydantic schemas
│   │   ├── __init__.py
│   │   ├── requests.py                # Request models
│   │   └── responses.py               # Response models
│   │
│   └── middleware/                    # Middleware
│       ├── __init__.py
│       ├── auth.py                    # Authentication
│       ├── logging.py                 # Request logging
│       └── error_handling.py          # Error handling
│
├── 🧪 tests/                           # Test suite
│   ├── __init__.py
│   ├── conftest.py                    # Pytest config
│   │
│   ├── unit/                          # Unit tests
│   │   ├── test_ingestion/
│   │   ├── test_preprocessing/
│   │   ├── test_chunking/
│   │   ├── test_retrieval/
│   │   └── test_generation/
│   │
│   ├── integration/                   # Integration tests
│   │   ├── test_pipelines.py
│   │   └── test_end_to_end.py
│   │
│   └── fixtures/                      # Test fixtures
│       ├── sample_documents/
│       └── expected_outputs/
│
├── 📓 notebooks/                       # Jupyter notebooks
│   ├── 01_data_exploration.ipynb
│   ├── 02_chunking_analysis.ipynb
│   ├── 03_embedding_evaluation.ipynb
│   ├── 04_retrieval_testing.ipynb
│   └── 05_query_enhancement.ipynb
│
├── 🚀 scripts/                         # Utility scripts
│   ├── __init__.py
│   ├── bootstrap_db.py                # Setup database
│   ├── import_chunks.py               # Import processed chunks
│   ├── ingest_documents.py            # Bulk ingestion
│   ├── update_index.py                # Update vector index
│   ├── run_evaluation.py              # Run evaluations
│   └── benchmark.py                   # Performance benchmark
│
├── 🐳 deployment/                      # Deployment files
│   ├── docker/
│   │   ├── Dockerfile
│   │   ├── docker-compose.yml
│   │   └── docker-compose.prod.yml
│   │
│   └── k8s/                           # Kubernetes (if needed)
│       ├── deployment.yaml
│       └── service.yaml
│
├── 📚 docs/                            # Documentation
│   ├── setup.md                       # Setup guide
│   ├── architecture.md                # Architecture overview
│   ├── api.md                         # API documentation
│   ├── phases/                        # Phase documentation
│   │   ├── phase1_quick_wins.md
│   │   ├── phase2_advanced.md
│   │   └── phase3_optimization.md
│   └── guides/                        # User guides
│       ├── ingestion_guide.md
│       └── retrieval_guide.md
│
├── 📊 monitoring/                      # Monitoring & logging
│   ├── logs/                          # Application logs
│   ├── metrics/                       # Metrics data
│   └── dashboards/                    # Grafana dashboards
│
├── .env.example                       # Environment template
├── .gitignore
├── requirements.txt                   # Python dependencies
├── environment.yaml                   # Conda environment
├── pyproject.toml                     # Project metadata
└── README.md
