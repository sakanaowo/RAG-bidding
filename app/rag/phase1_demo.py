"""
Phase 1 Demo - Quick Wins Implementation
Test v√† demo c√°c c·∫£i ti·∫øn nhanh c·ªßa h·ªá th·ªëng RAG
"""

from typing import Dict
from app.rag.chain import answer

BASELINE_MODE = "fast"
PHASE1_MODE = "quality"


def phase1_enhanced_answer(question: str, mode: str = "balanced") -> Dict:
    """Tr·∫£ l·ªùi c√¢u h·ªèi v·ªõi Phase 1 pipeline (cho demo)."""
    if mode not in {"fast", "balanced", "quality"}:
        mode = "balanced"
    return answer(question, mode=mode)


def compare_basic_vs_phase1(
    question: str,
    baseline_mode: str = BASELINE_MODE,
    phase1_mode: str = PHASE1_MODE,
) -> Dict:
    """So s√°nh gi·ªØa ch·∫ø ƒë·ªô baseline v√† ch·∫ø ƒë·ªô Phase 1 ch·∫•t l∆∞·ª£ng."""
    print(f"\nüîç Testing question: {question}")
    print("=" * 60)

    # Baseline (gi·∫£ l·∫≠p fixed k b·∫±ng fast mode)
    basic_result = answer(question, mode=baseline_mode)

    # Phase 1 Enhanced
    enhanced_result = phase1_enhanced_answer(question, mode=phase1_mode)

    comparison = {
        "question": question,
        "basic": {
            "answer_length": len(basic_result["answer"]),
            "sources_count": len(basic_result["sources"]),
            "mode": baseline_mode,
            "retrieval_method": f"Adaptive k={basic_result['adaptive_retrieval']['k_used']}",
        },
        "phase1_enhanced": {
            "answer_length": len(enhanced_result["answer"]),
            "sources_count": len(enhanced_result["sources"]),
            "retrieval_method": f"Adaptive k={enhanced_result['adaptive_retrieval']['k_used']}",
            "complexity": enhanced_result["adaptive_retrieval"]["complexity"],
            "mode": enhanced_result["phase1_mode"],
        },
    }

    return comparison


def demo_phase1():
    """Demo Phase 1 quick wins"""
    print("üöÄ RAG System Phase 1 - Quick Wins Demo")
    print("=" * 50)

    # Test questions with different complexity
    test_questions = [
        "T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh l√† g√¨?",  # Simple factual
        "So s√°nh quan ƒëi·ªÉm c·ªßa H·ªì Ch√≠ Minh v·ªÅ ƒë·ªôc l·∫≠p d√¢n t·ªôc v√† ch·ªß nghƒ©a x√£ h·ªôi",  # Complex
        "Ai l√† H·ªì Ch√≠ Minh?",  # Very simple
        "Ph√¢n t√≠ch ·∫£nh h∆∞·ªüng c·ªßa t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh ƒë·∫øn phong tr√†o gi·∫£i ph√≥ng d√¢n t·ªôc",  # Complex analytical
    ]

    for question in test_questions:
        comparison = compare_basic_vs_phase1(question)

        print(f"\nüìä Question: {question}")
        print(
            f"   Baseline mode ({comparison['basic']['mode']}): {comparison['basic']['retrieval_method']}"
        )
        print(
            f"   Enhanced: {comparison['phase1_enhanced']['retrieval_method']} (Complexity: {comparison['phase1_enhanced']['complexity']})"
        )
        print()

    print("‚úÖ Phase 1 Demo completed!")
    print("\nüéØ Key Improvements Delivered:")
    print("   ‚Ä¢ Dynamic document retrieval (k=2-8 based on complexity)")
    print("   ‚Ä¢ Vietnamese question analysis")
    print("   ‚Ä¢ Configurable RAG modes (fast/balanced/quality)")
    print("   ‚Ä¢ Ready foundation for Phase 2")


if __name__ == "__main__":
    demo_phase1()
